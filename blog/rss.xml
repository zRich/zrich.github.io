<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Zhao Zhenhua Blog</title>
        <link>https://zhaozhenhua.me/blog</link>
        <description>Zhao Zhenhua Blog</description>
        <lastBuildDate>Fri, 27 Jan 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-cn</language>
        <item>
            <title><![CDATA[做静态网站：Hugo，Astro和NextJS哪个更好？]]></title>
            <link>https://zhaozhenhua.me/blog/mdx-blog-post</link>
            <guid>mdx-blog-post</guid>
            <pubDate>Fri, 27 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[静态网站工具比较。Hugo，Astro，NextJS]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" alt="Cover Page" src="/assets/images/IMG_1444-ce9e9a5a7805907365151abaadf717b3.JPG" width="2232" height="2537" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是静态网站">什么是静态网站<a class="hash-link" href="#什么是静态网站" title="标题的直接链接">​</a></h2><p>静态网站，顾名思义，是内容相对更新不是很快的网站。个人网站，公司网站，文档等由于更新不频率，都时候用静态网站。操作制作静态网站直接用 <strong>HTML</strong> + <strong>CSS</strong> + <strong>JavaScript</strong>，现在已经有了很多制作静态网站的工具。比如，本文要将的 Hugo，Astro，NextJS 都可以用来做静态网站，当然它们的功能不止是做静态网站。</p><p>使用静态网站工具设计网站，增加新的页面或者内容之后，需要将其编译成静态网站，部署到服务器上，可喜的是这几个工具都提供了非常友好的部署方式，并将与很多托管站点有很好的兼容性。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hugo">Hugo<a class="hash-link" href="#hugo" title="标题的直接链接">​</a></h2><p><strong>Hugo</strong> 是用<strong>Go</strong>语言开发的一个开源的静态网站工具，它还提供了非常便捷的<strong>CLI</strong>工具用于管理项目、管理页面。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装">安装<a class="hash-link" href="#安装" title="标题的直接链接">​</a></h3><p>Hugo 是用 <strong>Go</strong> 语言开发的，使用 <strong>Hugo</strong> 需要安装 <strong>Go</strong> 和 <strong>Git</strong>。<strong>Hugo</strong> 的安装也非常简单，一个命令就可以完成安装，或者你也可以像我一样，下载源码编译。详细步骤请参考官方<a href="https://gohugo.io/installation/linux/" target="_blank" rel="noopener noreferrer">安装说明</a>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板">模板<a class="hash-link" href="#模板" title="标题的直接链接">​</a></h3><p><strong>Hugo</strong> 社区成立的比较早，社区活跃目前 <strong>Github</strong> 上的 <strong>Star</strong> 数量已经达到<strong>64.9K</strong>，因此 <strong>Hugo</strong> 的模板也非常多。很容易找到自己喜欢的模板。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性">特性<a class="hash-link" href="#特性" title="标题的直接链接">​</a></h3><p>使用 <strong>Hugo</strong> 新增页面非常容易，直接通过 <code>hugo new</code> 命令就可以新建一个 <strong>markdown</strong> 文件，你需要做的是把自己的内容按照 <strong>markdown</strong> 格式输入就好。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点">缺点<a class="hash-link" href="#缺点" title="标题的直接链接">​</a></h3><p>如果使用 <strong>markdown</strong> 就能满足你的需求，那么 <strong>Hugo</strong> 是一个完美的工具。但是，我觉得作为个人网站应该自己能够做一些独特的东西，当然也包括 <strong>UI</strong>，例如图片的位置，表格的样式等。如果使用 <strong>Hugo</strong> 达到这样的效果并不容易。 </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="astro">Astro<a class="hash-link" href="#astro" title="标题的直接链接">​</a></h2><p>比起 <strong>Hugo</strong> <strong>Astro</strong> 非常年轻，它好像诞生与2021年6月。还不到2岁，最近刚刚发布<strong>2.0</strong>版本。但是它的社区也还是比较活跃的，目前 <strong>GitHub</strong> 上已经有<strong>25.4K Star</strong>。</p><p><strong>Astro</strong> 是 <strong>使用 </strong>JavaScript/TypeScript<strong> 开发的。就网站开发而言，</strong>JavaScript<strong> 比 </strong>Go** 语言更具有优势，超级庞大的开发人员以及现成的海量工具可以直接使用。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-1">安装<a class="hash-link" href="#安装-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 依赖于 <strong>NodeJS</strong>，因此你需要首先安装 <strong>NodeJS</strong>，然后使用包管理工具安装 <strong>Astro</strong>，不过也非常简单。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-1">模板<a class="hash-link" href="#模板-1" title="标题的直接链接">​</a></h3><p>与 <strong>Hugo</strong> 相比，<strong>Astro</strong> 的模板少很多，毕竟它还太年轻，不过也能找到很多不错的模板，但是很多需要付费购买。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-1">特性<a class="hash-link" href="#特性-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 不但支持 <strong>markdown</strong> 而且还支持 <strong>react</strong> 和 <strong>mdx</strong>。因此，你可以向使用 <strong><code>React</code></strong>那样创建页面，每个元素的样式你都可以完全控制。<code>mdx</code> 则允许你将 <strong>markdown</strong>和 <strong>JS</strong> 嵌入使用。总之，给了你非常大的便利性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-1">缺点<a class="hash-link" href="#缺点-1" title="标题的直接链接">​</a></h3><p>我之所以要体验 <strong>Astro</strong> 是因为 <strong>Hugo</strong> 的灵活性不足，无法让我轻松美化 <strong>UI</strong>。<strong>Astro</strong> 确实提供了这个功能，但是一直没有找到满意的模板，自己从头开发又没有必要使用 <strong>Astro</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="nextjs">NextJS<a class="hash-link" href="#nextjs" title="标题的直接链接">​</a></h2><p><strong>NextJS</strong> 是功能比 <strong>Hugo</strong> 和 <strong>Astro</strong> 强大的多的工具，它是一个 <strong>React</strong> 的 Web 框架。生态也更多，<strong>GitHub</strong> 上已经有<strong>99.7K Star</strong>。使用它做静态网站确实是“杀鸡用牛刀”大材小用了。但是我比较喜欢折腾，玩玩挺好的。另外原因是区块链生态的很多工具都是采用 <strong>React</strong> 开发的，对自己的技术栈很有帮助。 </p><p>我适用 <strong>NextJS</strong> 做静态完整是<strong>NextJS</strong> + <strong>ContentLayer</strong> 的组合，后者是 <strong>NextJS</strong> 生态的一个库，用于支持<strong>markdown</strong>、<strong>mdx</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-2">安装<a class="hash-link" href="#安装-2" title="标题的直接链接">​</a></h3><p>与其他 <strong>Web</strong> 框架类似，安装 <strong>NodeJS</strong> 之后，使用包管理工具可以一键安装 <strong>NextJS</strong>，并不复杂。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-2">模板<a class="hash-link" href="#模板-2" title="标题的直接链接">​</a></h3><p>虽然也有做静态网站的模板，但是使用<strong>NextJS</strong>的并不多。但是，我感觉做静态网站的代码量并不比不使用模板的 <strong>Astro</strong> 多。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-2">特性<a class="hash-link" href="#特性-2" title="标题的直接链接">​</a></h3><p><strong>NextJS</strong> 的优势在于它拥有非常强大的功能，基本上做Web需要的所有的功能它都具备了，特别是与 <strong>React</strong> 生态的融合对我来说非常有吸引力。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-2">缺点<a class="hash-link" href="#缺点-2" title="标题的直接链接">​</a></h3><p>如果单纯的做静态网站，<strong>NextJS</strong> 的缺点也是非常明显的，相对 <strong>Hugo</strong> 和 <strong>Astro</strong> 你需要自己动手完成大量的工作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>如果你仅仅是一个内容创作者，对编程兴趣不大，那么我建议你使用 <strong>Hugo</strong>。但是，我比较看好 <strong>Astro</strong>，与 <strong>Hugo</strong> 相比，它的模板少了，但是假以时日我相信肯定会丰富起来的。如果你喜欢从头折腾，不妨试试 <strong>NextJS</strong> 或者 <strong>React</strong>！</p>]]></content:encoded>
            <category>Web3</category>
            <category>WebSite</category>
            <category>Blog</category>
            <category>Docs</category>
        </item>
        <item>
            <title><![CDATA[Web3的盈利模式]]></title>
            <link>https://zhaozhenhua.me/blog/mdx-blog-post</link>
            <guid>mdx-blog-post</guid>
            <pubDate>Mon, 05 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Web3的盈利模式]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" alt="Cover Page" src="/assets/images/IMG_1444-ce9e9a5a7805907365151abaadf717b3.JPG" width="2232" height="2537" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是静态网站">什么是静态网站<a class="hash-link" href="#什么是静态网站" title="标题的直接链接">​</a></h2><p>静态网站，顾名思义，是内容相对更新不是很快的网站。个人网站，公司网站，文档等由于更新不频率，都时候用静态网站。操作制作静态网站直接用 <strong>HTML</strong> + <strong>CSS</strong> + <strong>JavaScript</strong>，现在已经有了很多制作静态网站的工具。比如，本文要将的 Hugo，Astro，NextJS 都可以用来做静态网站，当然它们的功能不止是做静态网站。</p><p>使用静态网站工具设计网站，增加新的页面或者内容之后，需要将其编译成静态网站，部署到服务器上，可喜的是这几个工具都提供了非常友好的部署方式，并将与很多托管站点有很好的兼容性。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hugo">Hugo<a class="hash-link" href="#hugo" title="标题的直接链接">​</a></h2><p><strong>Hugo</strong> 是用<strong>Go</strong>语言开发的一个开源的静态网站工具，它还提供了非常便捷的<strong>CLI</strong>工具用于管理项目、管理页面。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装">安装<a class="hash-link" href="#安装" title="标题的直接链接">​</a></h3><p>Hugo 是用 <strong>Go</strong> 语言开发的，使用 <strong>Hugo</strong> 需要安装 <strong>Go</strong> 和 <strong>Git</strong>。<strong>Hugo</strong> 的安装也非常简单，一个命令就可以完成安装，或者你也可以像我一样，下载源码编译。详细步骤请参考官方<a href="https://gohugo.io/installation/linux/" target="_blank" rel="noopener noreferrer">安装说明</a>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板">模板<a class="hash-link" href="#模板" title="标题的直接链接">​</a></h3><p><strong>Hugo</strong> 社区成立的比较早，社区活跃目前 <strong>Github</strong> 上的 <strong>Star</strong> 数量已经达到<strong>64.9K</strong>，因此 <strong>Hugo</strong> 的模板也非常多。很容易找到自己喜欢的模板。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性">特性<a class="hash-link" href="#特性" title="标题的直接链接">​</a></h3><p>使用 <strong>Hugo</strong> 新增页面非常容易，直接通过 <code>hugo new</code> 命令就可以新建一个 <strong>markdown</strong> 文件，你需要做的是把自己的内容按照 <strong>markdown</strong> 格式输入就好。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点">缺点<a class="hash-link" href="#缺点" title="标题的直接链接">​</a></h3><p>如果使用 <strong>markdown</strong> 就能满足你的需求，那么 <strong>Hugo</strong> 是一个完美的工具。但是，我觉得作为个人网站应该自己能够做一些独特的东西，当然也包括 <strong>UI</strong>，例如图片的位置，表格的样式等。如果使用 <strong>Hugo</strong> 达到这样的效果并不容易。 </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="astro">Astro<a class="hash-link" href="#astro" title="标题的直接链接">​</a></h2><p>比起 <strong>Hugo</strong> <strong>Astro</strong> 非常年轻，它好像诞生与2021年6月。还不到2岁，最近刚刚发布<strong>2.0</strong>版本。但是它的社区也还是比较活跃的，目前 <strong>GitHub</strong> 上已经有<strong>25.4K Star</strong>。</p><p><strong>Astro</strong> 是 <strong>使用 </strong>JavaScript/TypeScript<strong> 开发的。就网站开发而言，</strong>JavaScript<strong> 比 </strong>Go** 语言更具有优势，超级庞大的开发人员以及现成的海量工具可以直接使用。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-1">安装<a class="hash-link" href="#安装-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 依赖于 <strong>NodeJS</strong>，因此你需要首先安装 <strong>NodeJS</strong>，然后使用包管理工具安装 <strong>Astro</strong>，不过也非常简单。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-1">模板<a class="hash-link" href="#模板-1" title="标题的直接链接">​</a></h3><p>与 <strong>Hugo</strong> 相比，<strong>Astro</strong> 的模板少很多，毕竟它还太年轻，不过也能找到很多不错的模板，但是很多需要付费购买。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-1">特性<a class="hash-link" href="#特性-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 不但支持 <strong>markdown</strong> 而且还支持 <strong>react</strong> 和 <strong>mdx</strong>。因此，你可以向使用 <strong><code>React</code></strong>那样创建页面，每个元素的样式你都可以完全控制。<code>mdx</code> 则允许你将 <strong>markdown</strong>和 <strong>JS</strong> 嵌入使用。总之，给了你非常大的便利性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-1">缺点<a class="hash-link" href="#缺点-1" title="标题的直接链接">​</a></h3><p>我之所以要体验 <strong>Astro</strong> 是因为 <strong>Hugo</strong> 的灵活性不足，无法让我轻松美化 <strong>UI</strong>。<strong>Astro</strong> 确实提供了这个功能，但是一直没有找到满意的模板，自己从头开发又没有必要使用 <strong>Astro</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="nextjs">NextJS<a class="hash-link" href="#nextjs" title="标题的直接链接">​</a></h2><p><strong>NextJS</strong> 是功能比 <strong>Hugo</strong> 和 <strong>Astro</strong> 强大的多的工具，它是一个 <strong>React</strong> 的 Web 框架。生态也更多，<strong>GitHub</strong> 上已经有<strong>99.7K Star</strong>。使用它做静态网站确实是“杀鸡用牛刀”大材小用了。但是我比较喜欢折腾，玩玩挺好的。另外原因是区块链生态的很多工具都是采用 <strong>React</strong> 开发的，对自己的技术栈很有帮助。 </p><p>我适用 <strong>NextJS</strong> 做静态完整是<strong>NextJS</strong> + <strong>ContentLayer</strong> 的组合，后者是 <strong>NextJS</strong> 生态的一个库，用于支持<strong>markdown</strong>、<strong>mdx</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-2">安装<a class="hash-link" href="#安装-2" title="标题的直接链接">​</a></h3><p>与其他 <strong>Web</strong> 框架类似，安装 <strong>NodeJS</strong> 之后，使用包管理工具可以一键安装 <strong>NextJS</strong>，并不复杂。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-2">模板<a class="hash-link" href="#模板-2" title="标题的直接链接">​</a></h3><p>虽然也有做静态网站的模板，但是使用<strong>NextJS</strong>的并不多。但是，我感觉做静态网站的代码量并不比不使用模板的 <strong>Astro</strong> 多。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-2">特性<a class="hash-link" href="#特性-2" title="标题的直接链接">​</a></h3><p><strong>NextJS</strong> 的优势在于它拥有非常强大的功能，基本上做Web需要的所有的功能它都具备了，特别是与 <strong>React</strong> 生态的融合对我来说非常有吸引力。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-2">缺点<a class="hash-link" href="#缺点-2" title="标题的直接链接">​</a></h3><p>如果单纯的做静态网站，<strong>NextJS</strong> 的缺点也是非常明显的，相对 <strong>Hugo</strong> 和 <strong>Astro</strong> 你需要自己动手完成大量的工作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>如果你仅仅是一个内容创作者，对编程兴趣不大，那么我建议你使用 <strong>Hugo</strong>。但是，我比较看好 <strong>Astro</strong>，与 <strong>Hugo</strong> 相比，它的模板少了，但是假以时日我相信肯定会丰富起来的。如果你喜欢从头折腾，不妨试试 <strong>NextJS</strong> 或者 <strong>React</strong>！</p>]]></content:encoded>
            <category>Web3</category>
            <category>元宇宙</category>
            <category>Blog</category>
        </item>
        <item>
            <title><![CDATA[大部分人不关心自己的数据]]></title>
            <link>https://zhaozhenhua.me/blog/mdx-blog-post</link>
            <guid>mdx-blog-post</guid>
            <pubDate>Tue, 01 Nov 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[人们并不关心自己的数据]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" alt="Cover Page" src="/assets/images/IMG_1444-ce9e9a5a7805907365151abaadf717b3.JPG" width="2232" height="2537" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是静态网站">什么是静态网站<a class="hash-link" href="#什么是静态网站" title="标题的直接链接">​</a></h2><p>静态网站，顾名思义，是内容相对更新不是很快的网站。个人网站，公司网站，文档等由于更新不频率，都时候用静态网站。操作制作静态网站直接用 <strong>HTML</strong> + <strong>CSS</strong> + <strong>JavaScript</strong>，现在已经有了很多制作静态网站的工具。比如，本文要将的 Hugo，Astro，NextJS 都可以用来做静态网站，当然它们的功能不止是做静态网站。</p><p>使用静态网站工具设计网站，增加新的页面或者内容之后，需要将其编译成静态网站，部署到服务器上，可喜的是这几个工具都提供了非常友好的部署方式，并将与很多托管站点有很好的兼容性。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hugo">Hugo<a class="hash-link" href="#hugo" title="标题的直接链接">​</a></h2><p><strong>Hugo</strong> 是用<strong>Go</strong>语言开发的一个开源的静态网站工具，它还提供了非常便捷的<strong>CLI</strong>工具用于管理项目、管理页面。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装">安装<a class="hash-link" href="#安装" title="标题的直接链接">​</a></h3><p>Hugo 是用 <strong>Go</strong> 语言开发的，使用 <strong>Hugo</strong> 需要安装 <strong>Go</strong> 和 <strong>Git</strong>。<strong>Hugo</strong> 的安装也非常简单，一个命令就可以完成安装，或者你也可以像我一样，下载源码编译。详细步骤请参考官方<a href="https://gohugo.io/installation/linux/" target="_blank" rel="noopener noreferrer">安装说明</a>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板">模板<a class="hash-link" href="#模板" title="标题的直接链接">​</a></h3><p><strong>Hugo</strong> 社区成立的比较早，社区活跃目前 <strong>Github</strong> 上的 <strong>Star</strong> 数量已经达到<strong>64.9K</strong>，因此 <strong>Hugo</strong> 的模板也非常多。很容易找到自己喜欢的模板。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性">特性<a class="hash-link" href="#特性" title="标题的直接链接">​</a></h3><p>使用 <strong>Hugo</strong> 新增页面非常容易，直接通过 <code>hugo new</code> 命令就可以新建一个 <strong>markdown</strong> 文件，你需要做的是把自己的内容按照 <strong>markdown</strong> 格式输入就好。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点">缺点<a class="hash-link" href="#缺点" title="标题的直接链接">​</a></h3><p>如果使用 <strong>markdown</strong> 就能满足你的需求，那么 <strong>Hugo</strong> 是一个完美的工具。但是，我觉得作为个人网站应该自己能够做一些独特的东西，当然也包括 <strong>UI</strong>，例如图片的位置，表格的样式等。如果使用 <strong>Hugo</strong> 达到这样的效果并不容易。 </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="astro">Astro<a class="hash-link" href="#astro" title="标题的直接链接">​</a></h2><p>比起 <strong>Hugo</strong> <strong>Astro</strong> 非常年轻，它好像诞生与2021年6月。还不到2岁，最近刚刚发布<strong>2.0</strong>版本。但是它的社区也还是比较活跃的，目前 <strong>GitHub</strong> 上已经有<strong>25.4K Star</strong>。</p><p><strong>Astro</strong> 是 <strong>使用 </strong>JavaScript/TypeScript<strong> 开发的。就网站开发而言，</strong>JavaScript<strong> 比 </strong>Go** 语言更具有优势，超级庞大的开发人员以及现成的海量工具可以直接使用。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-1">安装<a class="hash-link" href="#安装-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 依赖于 <strong>NodeJS</strong>，因此你需要首先安装 <strong>NodeJS</strong>，然后使用包管理工具安装 <strong>Astro</strong>，不过也非常简单。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-1">模板<a class="hash-link" href="#模板-1" title="标题的直接链接">​</a></h3><p>与 <strong>Hugo</strong> 相比，<strong>Astro</strong> 的模板少很多，毕竟它还太年轻，不过也能找到很多不错的模板，但是很多需要付费购买。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-1">特性<a class="hash-link" href="#特性-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 不但支持 <strong>markdown</strong> 而且还支持 <strong>react</strong> 和 <strong>mdx</strong>。因此，你可以向使用 <strong><code>React</code></strong>那样创建页面，每个元素的样式你都可以完全控制。<code>mdx</code> 则允许你将 <strong>markdown</strong>和 <strong>JS</strong> 嵌入使用。总之，给了你非常大的便利性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-1">缺点<a class="hash-link" href="#缺点-1" title="标题的直接链接">​</a></h3><p>我之所以要体验 <strong>Astro</strong> 是因为 <strong>Hugo</strong> 的灵活性不足，无法让我轻松美化 <strong>UI</strong>。<strong>Astro</strong> 确实提供了这个功能，但是一直没有找到满意的模板，自己从头开发又没有必要使用 <strong>Astro</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="nextjs">NextJS<a class="hash-link" href="#nextjs" title="标题的直接链接">​</a></h2><p><strong>NextJS</strong> 是功能比 <strong>Hugo</strong> 和 <strong>Astro</strong> 强大的多的工具，它是一个 <strong>React</strong> 的 Web 框架。生态也更多，<strong>GitHub</strong> 上已经有<strong>99.7K Star</strong>。使用它做静态网站确实是“杀鸡用牛刀”大材小用了。但是我比较喜欢折腾，玩玩挺好的。另外原因是区块链生态的很多工具都是采用 <strong>React</strong> 开发的，对自己的技术栈很有帮助。 </p><p>我适用 <strong>NextJS</strong> 做静态完整是<strong>NextJS</strong> + <strong>ContentLayer</strong> 的组合，后者是 <strong>NextJS</strong> 生态的一个库，用于支持<strong>markdown</strong>、<strong>mdx</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-2">安装<a class="hash-link" href="#安装-2" title="标题的直接链接">​</a></h3><p>与其他 <strong>Web</strong> 框架类似，安装 <strong>NodeJS</strong> 之后，使用包管理工具可以一键安装 <strong>NextJS</strong>，并不复杂。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-2">模板<a class="hash-link" href="#模板-2" title="标题的直接链接">​</a></h3><p>虽然也有做静态网站的模板，但是使用<strong>NextJS</strong>的并不多。但是，我感觉做静态网站的代码量并不比不使用模板的 <strong>Astro</strong> 多。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-2">特性<a class="hash-link" href="#特性-2" title="标题的直接链接">​</a></h3><p><strong>NextJS</strong> 的优势在于它拥有非常强大的功能，基本上做Web需要的所有的功能它都具备了，特别是与 <strong>React</strong> 生态的融合对我来说非常有吸引力。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-2">缺点<a class="hash-link" href="#缺点-2" title="标题的直接链接">​</a></h3><p>如果单纯的做静态网站，<strong>NextJS</strong> 的缺点也是非常明显的，相对 <strong>Hugo</strong> 和 <strong>Astro</strong> 你需要自己动手完成大量的工作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>如果你仅仅是一个内容创作者，对编程兴趣不大，那么我建议你使用 <strong>Hugo</strong>。但是，我比较看好 <strong>Astro</strong>，与 <strong>Hugo</strong> 相比，它的模板少了，但是假以时日我相信肯定会丰富起来的。如果你喜欢从头折腾，不妨试试 <strong>NextJS</strong> 或者 <strong>React</strong>！</p>]]></content:encoded>
            <category>Web3</category>
            <category>元宇宙</category>
            <category>Blog</category>
        </item>
        <item>
            <title><![CDATA[左右数据分类法]]></title>
            <link>https://zhaozhenhua.me/blog/mdx-blog-post</link>
            <guid>mdx-blog-post</guid>
            <pubDate>Mon, 24 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[左右数据分类法]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" alt="Cover Page" src="/assets/images/IMG_1444-ce9e9a5a7805907365151abaadf717b3.JPG" width="2232" height="2537" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是静态网站">什么是静态网站<a class="hash-link" href="#什么是静态网站" title="标题的直接链接">​</a></h2><p>静态网站，顾名思义，是内容相对更新不是很快的网站。个人网站，公司网站，文档等由于更新不频率，都时候用静态网站。操作制作静态网站直接用 <strong>HTML</strong> + <strong>CSS</strong> + <strong>JavaScript</strong>，现在已经有了很多制作静态网站的工具。比如，本文要将的 Hugo，Astro，NextJS 都可以用来做静态网站，当然它们的功能不止是做静态网站。</p><p>使用静态网站工具设计网站，增加新的页面或者内容之后，需要将其编译成静态网站，部署到服务器上，可喜的是这几个工具都提供了非常友好的部署方式，并将与很多托管站点有很好的兼容性。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hugo">Hugo<a class="hash-link" href="#hugo" title="标题的直接链接">​</a></h2><p><strong>Hugo</strong> 是用<strong>Go</strong>语言开发的一个开源的静态网站工具，它还提供了非常便捷的<strong>CLI</strong>工具用于管理项目、管理页面。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装">安装<a class="hash-link" href="#安装" title="标题的直接链接">​</a></h3><p>Hugo 是用 <strong>Go</strong> 语言开发的，使用 <strong>Hugo</strong> 需要安装 <strong>Go</strong> 和 <strong>Git</strong>。<strong>Hugo</strong> 的安装也非常简单，一个命令就可以完成安装，或者你也可以像我一样，下载源码编译。详细步骤请参考官方<a href="https://gohugo.io/installation/linux/" target="_blank" rel="noopener noreferrer">安装说明</a>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板">模板<a class="hash-link" href="#模板" title="标题的直接链接">​</a></h3><p><strong>Hugo</strong> 社区成立的比较早，社区活跃目前 <strong>Github</strong> 上的 <strong>Star</strong> 数量已经达到<strong>64.9K</strong>，因此 <strong>Hugo</strong> 的模板也非常多。很容易找到自己喜欢的模板。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性">特性<a class="hash-link" href="#特性" title="标题的直接链接">​</a></h3><p>使用 <strong>Hugo</strong> 新增页面非常容易，直接通过 <code>hugo new</code> 命令就可以新建一个 <strong>markdown</strong> 文件，你需要做的是把自己的内容按照 <strong>markdown</strong> 格式输入就好。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点">缺点<a class="hash-link" href="#缺点" title="标题的直接链接">​</a></h3><p>如果使用 <strong>markdown</strong> 就能满足你的需求，那么 <strong>Hugo</strong> 是一个完美的工具。但是，我觉得作为个人网站应该自己能够做一些独特的东西，当然也包括 <strong>UI</strong>，例如图片的位置，表格的样式等。如果使用 <strong>Hugo</strong> 达到这样的效果并不容易。 </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="astro">Astro<a class="hash-link" href="#astro" title="标题的直接链接">​</a></h2><p>比起 <strong>Hugo</strong> <strong>Astro</strong> 非常年轻，它好像诞生与2021年6月。还不到2岁，最近刚刚发布<strong>2.0</strong>版本。但是它的社区也还是比较活跃的，目前 <strong>GitHub</strong> 上已经有<strong>25.4K Star</strong>。</p><p><strong>Astro</strong> 是 <strong>使用 </strong>JavaScript/TypeScript<strong> 开发的。就网站开发而言，</strong>JavaScript<strong> 比 </strong>Go** 语言更具有优势，超级庞大的开发人员以及现成的海量工具可以直接使用。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-1">安装<a class="hash-link" href="#安装-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 依赖于 <strong>NodeJS</strong>，因此你需要首先安装 <strong>NodeJS</strong>，然后使用包管理工具安装 <strong>Astro</strong>，不过也非常简单。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-1">模板<a class="hash-link" href="#模板-1" title="标题的直接链接">​</a></h3><p>与 <strong>Hugo</strong> 相比，<strong>Astro</strong> 的模板少很多，毕竟它还太年轻，不过也能找到很多不错的模板，但是很多需要付费购买。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-1">特性<a class="hash-link" href="#特性-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 不但支持 <strong>markdown</strong> 而且还支持 <strong>react</strong> 和 <strong>mdx</strong>。因此，你可以向使用 <strong><code>React</code></strong>那样创建页面，每个元素的样式你都可以完全控制。<code>mdx</code> 则允许你将 <strong>markdown</strong>和 <strong>JS</strong> 嵌入使用。总之，给了你非常大的便利性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-1">缺点<a class="hash-link" href="#缺点-1" title="标题的直接链接">​</a></h3><p>我之所以要体验 <strong>Astro</strong> 是因为 <strong>Hugo</strong> 的灵活性不足，无法让我轻松美化 <strong>UI</strong>。<strong>Astro</strong> 确实提供了这个功能，但是一直没有找到满意的模板，自己从头开发又没有必要使用 <strong>Astro</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="nextjs">NextJS<a class="hash-link" href="#nextjs" title="标题的直接链接">​</a></h2><p><strong>NextJS</strong> 是功能比 <strong>Hugo</strong> 和 <strong>Astro</strong> 强大的多的工具，它是一个 <strong>React</strong> 的 Web 框架。生态也更多，<strong>GitHub</strong> 上已经有<strong>99.7K Star</strong>。使用它做静态网站确实是“杀鸡用牛刀”大材小用了。但是我比较喜欢折腾，玩玩挺好的。另外原因是区块链生态的很多工具都是采用 <strong>React</strong> 开发的，对自己的技术栈很有帮助。 </p><p>我适用 <strong>NextJS</strong> 做静态完整是<strong>NextJS</strong> + <strong>ContentLayer</strong> 的组合，后者是 <strong>NextJS</strong> 生态的一个库，用于支持<strong>markdown</strong>、<strong>mdx</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-2">安装<a class="hash-link" href="#安装-2" title="标题的直接链接">​</a></h3><p>与其他 <strong>Web</strong> 框架类似，安装 <strong>NodeJS</strong> 之后，使用包管理工具可以一键安装 <strong>NextJS</strong>，并不复杂。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-2">模板<a class="hash-link" href="#模板-2" title="标题的直接链接">​</a></h3><p>虽然也有做静态网站的模板，但是使用<strong>NextJS</strong>的并不多。但是，我感觉做静态网站的代码量并不比不使用模板的 <strong>Astro</strong> 多。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-2">特性<a class="hash-link" href="#特性-2" title="标题的直接链接">​</a></h3><p><strong>NextJS</strong> 的优势在于它拥有非常强大的功能，基本上做Web需要的所有的功能它都具备了，特别是与 <strong>React</strong> 生态的融合对我来说非常有吸引力。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-2">缺点<a class="hash-link" href="#缺点-2" title="标题的直接链接">​</a></h3><p>如果单纯的做静态网站，<strong>NextJS</strong> 的缺点也是非常明显的，相对 <strong>Hugo</strong> 和 <strong>Astro</strong> 你需要自己动手完成大量的工作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>如果你仅仅是一个内容创作者，对编程兴趣不大，那么我建议你使用 <strong>Hugo</strong>。但是，我比较看好 <strong>Astro</strong>，与 <strong>Hugo</strong> 相比，它的模板少了，但是假以时日我相信肯定会丰富起来的。如果你喜欢从头折腾，不妨试试 <strong>NextJS</strong> 或者 <strong>React</strong>！</p>]]></content:encoded>
            <category>Web3</category>
            <category>元宇宙</category>
            <category>Blog</category>
        </item>
        <item>
            <title><![CDATA[重新定义数据]]></title>
            <link>https://zhaozhenhua.me/blog/mdx-blog-post</link>
            <guid>mdx-blog-post</guid>
            <pubDate>Sat, 08 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[重新定义数据]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" alt="Cover Page" src="/assets/images/IMG_1444-ce9e9a5a7805907365151abaadf717b3.JPG" width="2232" height="2537" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是静态网站">什么是静态网站<a class="hash-link" href="#什么是静态网站" title="标题的直接链接">​</a></h2><p>静态网站，顾名思义，是内容相对更新不是很快的网站。个人网站，公司网站，文档等由于更新不频率，都时候用静态网站。操作制作静态网站直接用 <strong>HTML</strong> + <strong>CSS</strong> + <strong>JavaScript</strong>，现在已经有了很多制作静态网站的工具。比如，本文要将的 Hugo，Astro，NextJS 都可以用来做静态网站，当然它们的功能不止是做静态网站。</p><p>使用静态网站工具设计网站，增加新的页面或者内容之后，需要将其编译成静态网站，部署到服务器上，可喜的是这几个工具都提供了非常友好的部署方式，并将与很多托管站点有很好的兼容性。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hugo">Hugo<a class="hash-link" href="#hugo" title="标题的直接链接">​</a></h2><p><strong>Hugo</strong> 是用<strong>Go</strong>语言开发的一个开源的静态网站工具，它还提供了非常便捷的<strong>CLI</strong>工具用于管理项目、管理页面。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装">安装<a class="hash-link" href="#安装" title="标题的直接链接">​</a></h3><p>Hugo 是用 <strong>Go</strong> 语言开发的，使用 <strong>Hugo</strong> 需要安装 <strong>Go</strong> 和 <strong>Git</strong>。<strong>Hugo</strong> 的安装也非常简单，一个命令就可以完成安装，或者你也可以像我一样，下载源码编译。详细步骤请参考官方<a href="https://gohugo.io/installation/linux/" target="_blank" rel="noopener noreferrer">安装说明</a>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板">模板<a class="hash-link" href="#模板" title="标题的直接链接">​</a></h3><p><strong>Hugo</strong> 社区成立的比较早，社区活跃目前 <strong>Github</strong> 上的 <strong>Star</strong> 数量已经达到<strong>64.9K</strong>，因此 <strong>Hugo</strong> 的模板也非常多。很容易找到自己喜欢的模板。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性">特性<a class="hash-link" href="#特性" title="标题的直接链接">​</a></h3><p>使用 <strong>Hugo</strong> 新增页面非常容易，直接通过 <code>hugo new</code> 命令就可以新建一个 <strong>markdown</strong> 文件，你需要做的是把自己的内容按照 <strong>markdown</strong> 格式输入就好。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点">缺点<a class="hash-link" href="#缺点" title="标题的直接链接">​</a></h3><p>如果使用 <strong>markdown</strong> 就能满足你的需求，那么 <strong>Hugo</strong> 是一个完美的工具。但是，我觉得作为个人网站应该自己能够做一些独特的东西，当然也包括 <strong>UI</strong>，例如图片的位置，表格的样式等。如果使用 <strong>Hugo</strong> 达到这样的效果并不容易。 </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="astro">Astro<a class="hash-link" href="#astro" title="标题的直接链接">​</a></h2><p>比起 <strong>Hugo</strong> <strong>Astro</strong> 非常年轻，它好像诞生与2021年6月。还不到2岁，最近刚刚发布<strong>2.0</strong>版本。但是它的社区也还是比较活跃的，目前 <strong>GitHub</strong> 上已经有<strong>25.4K Star</strong>。</p><p><strong>Astro</strong> 是 <strong>使用 </strong>JavaScript/TypeScript<strong> 开发的。就网站开发而言，</strong>JavaScript<strong> 比 </strong>Go** 语言更具有优势，超级庞大的开发人员以及现成的海量工具可以直接使用。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-1">安装<a class="hash-link" href="#安装-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 依赖于 <strong>NodeJS</strong>，因此你需要首先安装 <strong>NodeJS</strong>，然后使用包管理工具安装 <strong>Astro</strong>，不过也非常简单。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-1">模板<a class="hash-link" href="#模板-1" title="标题的直接链接">​</a></h3><p>与 <strong>Hugo</strong> 相比，<strong>Astro</strong> 的模板少很多，毕竟它还太年轻，不过也能找到很多不错的模板，但是很多需要付费购买。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-1">特性<a class="hash-link" href="#特性-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 不但支持 <strong>markdown</strong> 而且还支持 <strong>react</strong> 和 <strong>mdx</strong>。因此，你可以向使用 <strong><code>React</code></strong>那样创建页面，每个元素的样式你都可以完全控制。<code>mdx</code> 则允许你将 <strong>markdown</strong>和 <strong>JS</strong> 嵌入使用。总之，给了你非常大的便利性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-1">缺点<a class="hash-link" href="#缺点-1" title="标题的直接链接">​</a></h3><p>我之所以要体验 <strong>Astro</strong> 是因为 <strong>Hugo</strong> 的灵活性不足，无法让我轻松美化 <strong>UI</strong>。<strong>Astro</strong> 确实提供了这个功能，但是一直没有找到满意的模板，自己从头开发又没有必要使用 <strong>Astro</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="nextjs">NextJS<a class="hash-link" href="#nextjs" title="标题的直接链接">​</a></h2><p><strong>NextJS</strong> 是功能比 <strong>Hugo</strong> 和 <strong>Astro</strong> 强大的多的工具，它是一个 <strong>React</strong> 的 Web 框架。生态也更多，<strong>GitHub</strong> 上已经有<strong>99.7K Star</strong>。使用它做静态网站确实是“杀鸡用牛刀”大材小用了。但是我比较喜欢折腾，玩玩挺好的。另外原因是区块链生态的很多工具都是采用 <strong>React</strong> 开发的，对自己的技术栈很有帮助。 </p><p>我适用 <strong>NextJS</strong> 做静态完整是<strong>NextJS</strong> + <strong>ContentLayer</strong> 的组合，后者是 <strong>NextJS</strong> 生态的一个库，用于支持<strong>markdown</strong>、<strong>mdx</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-2">安装<a class="hash-link" href="#安装-2" title="标题的直接链接">​</a></h3><p>与其他 <strong>Web</strong> 框架类似，安装 <strong>NodeJS</strong> 之后，使用包管理工具可以一键安装 <strong>NextJS</strong>，并不复杂。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-2">模板<a class="hash-link" href="#模板-2" title="标题的直接链接">​</a></h3><p>虽然也有做静态网站的模板，但是使用<strong>NextJS</strong>的并不多。但是，我感觉做静态网站的代码量并不比不使用模板的 <strong>Astro</strong> 多。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-2">特性<a class="hash-link" href="#特性-2" title="标题的直接链接">​</a></h3><p><strong>NextJS</strong> 的优势在于它拥有非常强大的功能，基本上做Web需要的所有的功能它都具备了，特别是与 <strong>React</strong> 生态的融合对我来说非常有吸引力。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-2">缺点<a class="hash-link" href="#缺点-2" title="标题的直接链接">​</a></h3><p>如果单纯的做静态网站，<strong>NextJS</strong> 的缺点也是非常明显的，相对 <strong>Hugo</strong> 和 <strong>Astro</strong> 你需要自己动手完成大量的工作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>如果你仅仅是一个内容创作者，对编程兴趣不大，那么我建议你使用 <strong>Hugo</strong>。但是，我比较看好 <strong>Astro</strong>，与 <strong>Hugo</strong> 相比，它的模板少了，但是假以时日我相信肯定会丰富起来的。如果你喜欢从头折腾，不妨试试 <strong>NextJS</strong> 或者 <strong>React</strong>！</p>]]></content:encoded>
            <category>Web3</category>
            <category>元宇宙</category>
            <category>Blog</category>
        </item>
        <item>
            <title><![CDATA[提高社区工作透明度]]></title>
            <link>https://zhaozhenhua.me/blog/mdx-blog-post</link>
            <guid>mdx-blog-post</guid>
            <pubDate>Sun, 02 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[透明的重要性]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" alt="Cover Page" src="/assets/images/IMG_1444-ce9e9a5a7805907365151abaadf717b3.JPG" width="2232" height="2537" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是静态网站">什么是静态网站<a class="hash-link" href="#什么是静态网站" title="标题的直接链接">​</a></h2><p>静态网站，顾名思义，是内容相对更新不是很快的网站。个人网站，公司网站，文档等由于更新不频率，都时候用静态网站。操作制作静态网站直接用 <strong>HTML</strong> + <strong>CSS</strong> + <strong>JavaScript</strong>，现在已经有了很多制作静态网站的工具。比如，本文要将的 Hugo，Astro，NextJS 都可以用来做静态网站，当然它们的功能不止是做静态网站。</p><p>使用静态网站工具设计网站，增加新的页面或者内容之后，需要将其编译成静态网站，部署到服务器上，可喜的是这几个工具都提供了非常友好的部署方式，并将与很多托管站点有很好的兼容性。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hugo">Hugo<a class="hash-link" href="#hugo" title="标题的直接链接">​</a></h2><p><strong>Hugo</strong> 是用<strong>Go</strong>语言开发的一个开源的静态网站工具，它还提供了非常便捷的<strong>CLI</strong>工具用于管理项目、管理页面。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装">安装<a class="hash-link" href="#安装" title="标题的直接链接">​</a></h3><p>Hugo 是用 <strong>Go</strong> 语言开发的，使用 <strong>Hugo</strong> 需要安装 <strong>Go</strong> 和 <strong>Git</strong>。<strong>Hugo</strong> 的安装也非常简单，一个命令就可以完成安装，或者你也可以像我一样，下载源码编译。详细步骤请参考官方<a href="https://gohugo.io/installation/linux/" target="_blank" rel="noopener noreferrer">安装说明</a>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板">模板<a class="hash-link" href="#模板" title="标题的直接链接">​</a></h3><p><strong>Hugo</strong> 社区成立的比较早，社区活跃目前 <strong>Github</strong> 上的 <strong>Star</strong> 数量已经达到<strong>64.9K</strong>，因此 <strong>Hugo</strong> 的模板也非常多。很容易找到自己喜欢的模板。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性">特性<a class="hash-link" href="#特性" title="标题的直接链接">​</a></h3><p>使用 <strong>Hugo</strong> 新增页面非常容易，直接通过 <code>hugo new</code> 命令就可以新建一个 <strong>markdown</strong> 文件，你需要做的是把自己的内容按照 <strong>markdown</strong> 格式输入就好。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点">缺点<a class="hash-link" href="#缺点" title="标题的直接链接">​</a></h3><p>如果使用 <strong>markdown</strong> 就能满足你的需求，那么 <strong>Hugo</strong> 是一个完美的工具。但是，我觉得作为个人网站应该自己能够做一些独特的东西，当然也包括 <strong>UI</strong>，例如图片的位置，表格的样式等。如果使用 <strong>Hugo</strong> 达到这样的效果并不容易。 </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="astro">Astro<a class="hash-link" href="#astro" title="标题的直接链接">​</a></h2><p>比起 <strong>Hugo</strong> <strong>Astro</strong> 非常年轻，它好像诞生与2021年6月。还不到2岁，最近刚刚发布<strong>2.0</strong>版本。但是它的社区也还是比较活跃的，目前 <strong>GitHub</strong> 上已经有<strong>25.4K Star</strong>。</p><p><strong>Astro</strong> 是 <strong>使用 </strong>JavaScript/TypeScript<strong> 开发的。就网站开发而言，</strong>JavaScript<strong> 比 </strong>Go** 语言更具有优势，超级庞大的开发人员以及现成的海量工具可以直接使用。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-1">安装<a class="hash-link" href="#安装-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 依赖于 <strong>NodeJS</strong>，因此你需要首先安装 <strong>NodeJS</strong>，然后使用包管理工具安装 <strong>Astro</strong>，不过也非常简单。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-1">模板<a class="hash-link" href="#模板-1" title="标题的直接链接">​</a></h3><p>与 <strong>Hugo</strong> 相比，<strong>Astro</strong> 的模板少很多，毕竟它还太年轻，不过也能找到很多不错的模板，但是很多需要付费购买。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-1">特性<a class="hash-link" href="#特性-1" title="标题的直接链接">​</a></h3><p><strong>Astro</strong> 不但支持 <strong>markdown</strong> 而且还支持 <strong>react</strong> 和 <strong>mdx</strong>。因此，你可以向使用 <strong><code>React</code></strong>那样创建页面，每个元素的样式你都可以完全控制。<code>mdx</code> 则允许你将 <strong>markdown</strong>和 <strong>JS</strong> 嵌入使用。总之，给了你非常大的便利性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-1">缺点<a class="hash-link" href="#缺点-1" title="标题的直接链接">​</a></h3><p>我之所以要体验 <strong>Astro</strong> 是因为 <strong>Hugo</strong> 的灵活性不足，无法让我轻松美化 <strong>UI</strong>。<strong>Astro</strong> 确实提供了这个功能，但是一直没有找到满意的模板，自己从头开发又没有必要使用 <strong>Astro</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="nextjs">NextJS<a class="hash-link" href="#nextjs" title="标题的直接链接">​</a></h2><p><strong>NextJS</strong> 是功能比 <strong>Hugo</strong> 和 <strong>Astro</strong> 强大的多的工具，它是一个 <strong>React</strong> 的 Web 框架。生态也更多，<strong>GitHub</strong> 上已经有<strong>99.7K Star</strong>。使用它做静态网站确实是“杀鸡用牛刀”大材小用了。但是我比较喜欢折腾，玩玩挺好的。另外原因是区块链生态的很多工具都是采用 <strong>React</strong> 开发的，对自己的技术栈很有帮助。 </p><p>我适用 <strong>NextJS</strong> 做静态完整是<strong>NextJS</strong> + <strong>ContentLayer</strong> 的组合，后者是 <strong>NextJS</strong> 生态的一个库，用于支持<strong>markdown</strong>、<strong>mdx</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-2">安装<a class="hash-link" href="#安装-2" title="标题的直接链接">​</a></h3><p>与其他 <strong>Web</strong> 框架类似，安装 <strong>NodeJS</strong> 之后，使用包管理工具可以一键安装 <strong>NextJS</strong>，并不复杂。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模板-2">模板<a class="hash-link" href="#模板-2" title="标题的直接链接">​</a></h3><p>虽然也有做静态网站的模板，但是使用<strong>NextJS</strong>的并不多。但是，我感觉做静态网站的代码量并不比不使用模板的 <strong>Astro</strong> 多。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-2">特性<a class="hash-link" href="#特性-2" title="标题的直接链接">​</a></h3><p><strong>NextJS</strong> 的优势在于它拥有非常强大的功能，基本上做Web需要的所有的功能它都具备了，特别是与 <strong>React</strong> 生态的融合对我来说非常有吸引力。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点-2">缺点<a class="hash-link" href="#缺点-2" title="标题的直接链接">​</a></h3><p>如果单纯的做静态网站，<strong>NextJS</strong> 的缺点也是非常明显的，相对 <strong>Hugo</strong> 和 <strong>Astro</strong> 你需要自己动手完成大量的工作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>如果你仅仅是一个内容创作者，对编程兴趣不大，那么我建议你使用 <strong>Hugo</strong>。但是，我比较看好 <strong>Astro</strong>，与 <strong>Hugo</strong> 相比，它的模板少了，但是假以时日我相信肯定会丰富起来的。如果你喜欢从头折腾，不妨试试 <strong>NextJS</strong> 或者 <strong>React</strong>！</p>]]></content:encoded>
            <category>OpenSource</category>
            <category>Community</category>
            <category>Blog</category>
        </item>
    </channel>
</rss>